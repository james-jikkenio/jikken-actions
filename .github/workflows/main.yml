name: Build, Compile, and Release Rust Program

on:
  push:
    branches: [ main, develop ]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Compile-Linux
        run: |
          cargo build --release
          sha256sum target/release/jk > linux_executable_hash.txt
          cat linux_executable_hash.txt
          echo "Executable SHA-256 hash: $(cat linux_executable_hash.txt)"
          echo "LINUX_EXECUTABLE_HASH=$(cat linux_executable_hash.txt)" >> "$GITHUB_OUTPUT"
          tar -zcvf jikken-x86_64-linux.tar.gz target/release/
          sha256sum jikken-x86_64-linux.tar.gz > linux_zip_hash.txt
          cat linux_zip_hash.txt
          echo "Zip SHA-256 hash: $(cat linux_zip_hash.txt)"
          echo "LINUX_ZIP_HASH=$(cat linux_zip_hash.txt)" >> "$GITHUB_OUTPUT"
          echo "::set-output name=LINUX_ZIP_HASH::$(cat linux_zip_hash.txt)"

      - name: Attach compressed file to release
        uses: actions/upload-artifact@main
        with:
          name: jikken-x86_64-linux.tar.gz
          path: jikken-x86_64-linux.tar.gz

  build-mac:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@main
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Compile-macOS
        id: compile-mac
        run: |
          cargo build --release
          openssl sha256 target/release/jk > mac_executable_hash.txt
          cat mac_executable_hash.txt
          echo "Executable SHA-256 hash: $(cat mac_executable_hash.txt)"
          echo "MAC_EXECUTABLE_HASH=$(cat mac_executable_hash.txt)" >> "$GITHUB_OUTPUT"
          tar -zcvf jikken-x86_64-apple-darwin.tar.gz target/release/
          openssl sha256 jikken-x86_64-apple-darwin.tar.gz > mac_zip_hash.txt
          cat mac_zip_hash.txt
          echo "Zip SHA-256 hash: $(cat mac_zip_hash.txt)"
          echo "MAC_ZIP_HASH=$(cat mac_zip_hash.txt)" >> "$GITHUB_OUTPUT"
          echo "::set-output name=MAC_ZIP_HASH::$(cat mac_zip_hash.txt)"

      - name: Attach compressed file to release
        uses: actions/upload-artifact@main
        with:
          name: jikken-x86_64-apple-darwin.tar.gz
          path: jikken-x86_64-apple-darwin.tar.gz

  # build-windows:
  #   runs-on: windows-latest

  #   steps:
  #     - uses: actions/checkout@main
  #     - name: Install Rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
#      - name: Compile (Windows)
#        run: |
          # cargo build --release
          # powershell -Command "Get-FileHash -Path target\release\jk.exe -Algorithm SHA256 | Select-Object -ExpandProperty Hash"
          # 7z a your_executable.zip target\release\jk.exe
          # powershell -Command "Get-FileHash -Path jk.zip -Algorithm SHA256 | Select-Object -ExpandProperty Hash"

          # sha256sum target/release/program* >> win_executable_hash.txt
          # cat win_executable_hash.txt
          # echo "Executable SHA-256 hash: $(cat win_executable_hash.txt)"
          # echo "WIN_EXECUTABLE_HASH=$(cat win_executable_hash.txt)" >> "$GITHUB_OUTPUT"
          # zip -r x86_64-pc-windows-gnu.zip target/release/*
          # sha256sum *.zip >> win_zip_hash.txt
          # cat win_zip_hash.txt
          # echo "Zip SHA-256 hash: $(cat win_zip_hash.txt)"
          # echo "WIN_ZIP_HASH=$(cat win_zip_hash.txt)" >> "$GITHUB_OUTPUT"

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: ${{ matrix.os }}-artifacts
      #     path: target/release/program* checksums.txt

  release:
    needs: [ build-linux, build-mac ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@main
      - name: Release Type
        run: |
          if [[ ${{ github.ref }} == refs/heads/main ]]; then
            echo "PRERELEASE=false" >> "$GITHUB_ENV"
          else
            echo "PRERELEASE=true" >> "$GITHUB_ENV"
          fi

      - uses: actions/checkout@main
      - name: Get ENV Variables
        run: |
          echo "Windows (jk.exe): WINDOWS-HASH"
          echo "Linux (jk): ${{ steps.build-linux.outputs.LINUX_EXECUTABLE_HASH }}"
          echo "Linux compressed hash ${{ steps.build-linux.outputs.LINUX_ZIP_HASH }}"
          echo "Mac (jk): ${{ steps.build-mac.outputs.MAC_EXECUTABLE_HASH }}"
          echo "MacOS compressed hash ${{ steps.build-mac.outputs.MAC_ZIP_HASH }}"


      - name: Create Release
        uses: actions/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}  # Access token for creating releases
        with:
          tag_name: v1.1.7  # Replace with your desired version tag
          release_name: Release v1.1.7  # Replace with your desired release name
          body: |
            **Release Notes**
            Docs can be found at: jikken.io
            Check the CHANGELOG.md for details.

            SHA-256 Binary Hashes
            - Windows (jk.exe): WINDOWS-HASH
            - Linux (jk): ${{ steps.build-linux.outputs.LINUX_EXECUTABLE_HASH }}
            - Mac (jk): ${{ steps.build-mac.outputs.MAC_EXECUTABLE_HASH }}

            SHA-256 Binary Hashes of compressed files.              
            - Windows (jikken-windows.zip)
            - Linux (jikken-x86_64-linux.tar.gz) ${{ steps.build-linux.outputs.LINUX_ZIP_HASH }}
            - Linux (jikken-x86_64-linux.tar.gz)v2 ${{ needs.build-linux.outputs.LINUX_ZIP_HASH }}
            - Mac (jikken-x86_64-apple-darwin.tar.gz) ${{ steps.build-mac.outputs.MAC_ZIP_HASH }}
            - Mac (jikken-x86_64-apple-darwin.tar.gz)v2 ${{ needs.build-mac.outputs.MAC_ZIP_HASH }}

          draft: false
          prerelease: ${{ env.PRERELEASE }}