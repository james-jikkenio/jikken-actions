name: Build, Compile, and Release Rust Program

on:
  push:
    branches: [ main, develop ]  # Trigger the workflow on pushes to the main branch

jobs:
  build-and-release:
    runs-on: ubuntu-latest  # Use a Linux-based runner for Rust compatibility



    steps:
      - name: Setup upterm session
        uses: lhotari/action-upterm@v1
        with:
          ## limits ssh access and adds the ssh public key for the user which triggered the workflow
          limit-access-to-actor: true
          ## limits ssh access and adds the ssh public keys of the listed GitHub users
          limit-access-to-users: james-jikkenio,louis-jikkenio

      - uses: actions/checkout@v3  # Check out the repository's code

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable  # Use the stable Rust toolchain
          components: rustfmt, clippy  # Optional for formatting and linting
          override: true

      - name: Build and Compile
        run: cargo build --release  # Build in release mode for optimized output

      - name: Calculate SHA-256 Hash of Executable
        run: |
          sha256sum target/release/jikken > executable_hash.txt
          cat executable_hash.txt
          echo "Executable SHA-256 hash: $(cat executable_hash.txt)"
          echo "EXECUTABLE_HASH=$(cat executable_hash.txt)" >> $GITHUB_ENV

      - name: Zip the Program
        run: zip -r jikken_linux.zip target/release/*

      - name: Calculate SHA-256 Hash of Zip File
        run: |
          sha256sum jikken_linux.zip > zip_hash.txt
          cat zip_hash.txt
          echo "Zip SHA-256 hash: $(cat zip_hash.txt)"
          echo "ZIP_HASH=$(cat zip_hash.txt)" >> $GITHUB_ENV

      - name: Attach compressed file to release
        uses: actions/upload-artifact@v3
        with:
          name: release-zip
          path: jikken_linux.zip

      - name: Set pre-release based on branch
        run: |
          if [[ ${{ github.ref }} == refs/heads/main ]]; then
            echo "::set-output name=prerelease::false"
          else
            echo "::set-output name=prerelease::true"
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}  # Access token for creating releases
        with:
          tag_name: v1.0.0  # Replace with your desired version tag
          release_name: Release v1.0.0  # Replace with your desired release name
          body: |
            **Release Notes**

            - Executable SHA-256 hash: ${{ env.EXECUTABLE_HASH }}
            - Zip SHA-256 hash: ${{ env.ZIP_HASH }}
          draft: false
          prerelease: ${{ steps.set_pre_release.outputs.prerelease }}
          file: jikken_linux.zip