name: Build, Compile, and Release Rust Program

on:
  push:
    branches: [ main, develop ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest  # Use a Linux-based runner for Rust compatibility

    steps:
      - uses: actions/checkout@v3  # Check out the repository's code

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable  # Use the stable Rust toolchain
          components: rustfmt, clippy  # Optional for formatting and linting
          override: true

      - name: Build and Compile
        run: cargo build --release  # Build in release mode for optimized output

      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1
      #   with:
      #     ## limits ssh access and adds the ssh public key for the user which triggered the workflow
      #     limit-access-to-actor: true
      #     ## limits ssh access and adds the ssh public keys of the listed GitHub users
      #     limit-access-to-users: james-jikkenio,louis-jikkenio

      - name: Calculate SHA-256 Hash of Executable
        run: |
          sha256sum target/release/jk > linux_executable_hash.txt
          cat linux_executable_hash.txt
          echo "Executable SHA-256 hash: $(cat linux_executable_hash.txt)"
          echo "LINUX_EXECUTABLE_HASH=$(cat linux_executable_hash.txt)" >> $GITHUB_ENV

      - name: Compress the Program
        run: |
          tar -zcvf jikken-x86_64-linux.tar.gz target/release/
#          zip -r jikken_linux.zip target/release/*

      - name: Calculate SHA-256 Hash of Compressed File
        run: |
          sha256sum jikken-x86_64-linux.tar.gz > linux_zip_hash.txt
          cat linux_zip_hash.txt
          echo "Zip SHA-256 hash: $(cat linux_zip_hash.txt)"
          echo "LINUX_ZIP_HASH=$(cat linux_zip_hash.txt)" >> $GITHUB_ENV

      - name: Attach compressed file to release
        uses: actions/upload-artifact@v3
        with:
          name: jikken-x86_64-linux.tar.gz
          path: jikken-x86_64-linux.tar.gz

      - name: Release Type
        run: |
          if [[ ${{ github.ref }} == refs/heads/main ]]; then
            echo "PRERELEASE=false" >> $GITHUB_ENV
          else
            echo "PRERELEASE=true" >> $GITHUB_ENV
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}  # Access token for creating releases
        with:
          tag_name: v1.0.7  # Replace with your desired version tag
          release_name: Release v1.0.7  # Replace with your desired release name
          body: |
            **Release Notes**

            SHA-256 Binary Hashes
            - Windows (jk.exe): WINDOWS-HASH
            - Linux (jk): ${{ env.LINUX_EXECUTABLE_HASH }}
            - Mac (jk): MAC-HASH

            SHA-256 Binary Hashes of compressed files.              
            - Windows (jikken-windows.zip)
            - Linux (jikken-x86_64-linux.tar.gz) ${{ env.LINUX_ZIP_HASH }}
            - Mac (jikken-x86_64-apple-darwin.tar.gz) MAC.tar.gz HASH

          draft: false
          prerelease: ${{ env.PRERELEASE }}