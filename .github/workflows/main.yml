name: Build, Compile, and Release Rust Program

on:
  push:
    branches: [ main, develop ]

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Compile-Linux
        id: compile-linux
        run: |
          cargo build --release
          tar -zcvf jikken-x86_64-linux.tar.gz target/release/jk
          mkdir -p upload-linux && cp "jikken-x86_64-linux.tar.gz" upload-linux/

      - name: Attach compressed file to release
        uses: actions/upload-artifact@main
        with:
          name: upload-linux
          path: upload-linux

  build-mac:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@main
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Compile-macOS
        id: compile-mac
        run: |
          cargo build --release
          tar -zcvf jikken-x86_64-apple-darwin.tar.gz target/release/jk
          mkdir -p upload-mac && cp "jikken-x86_64-apple-darwin.tar.gz" upload-mac/

      - name: Attach compressed file to release
        uses: actions/upload-artifact@main
        with:
          name: upload-mac
          path: upload-mac

  # build-windows:
  #   runs-on: windows-latest

  #   steps:
  #     - uses: actions/checkout@main
  #     - name: Install Rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
#      - name: Compile (Windows)
#        run: |
          # cargo build --release
          # powershell -Command "Get-FileHash -Path target\release\jk.exe -Algorithm SHA256 | Select-Object -ExpandProperty Hash"
          # 7z a your_executable.zip target\release\jk.exe
          # powershell -Command "Get-FileHash -Path jk.zip -Algorithm SHA256 | Select-Object -ExpandProperty Hash"

          # sha256sum target/release/program* >> win_executable_hash.txt
          # cat win_executable_hash.txt
          # echo "Executable SHA-256 hash: $(cat win_executable_hash.txt)"
          # echo "WIN_EXECUTABLE_HASH=$(cat win_executable_hash.txt)" >> "$GITHUB_OUTPUT"
          # zip -r x86_64-pc-windows-gnu.zip target/release/*
          # sha256sum *.zip >> win_zip_hash.txt
          # cat win_zip_hash.txt
          # echo "Zip SHA-256 hash: $(cat win_zip_hash.txt)"
          # echo "WIN_ZIP_HASH=$(cat win_zip_hash.txt)" >> "$GITHUB_OUTPUT"

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: ${{ matrix.os }}-artifacts
      #     path: target/release/program* checksums.txt

  release:
    needs: [ build-linux, build-mac ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@main
        name: Download Linux
        with:
          name: upload-linux

      - uses: actions/download-artifact@main
        name: Download Mac
        with:
          name: upload-mac

      - name: Get SHA256 Values
        run: |
          mkdir jk_linux jk_mac jk_windows
          sha256sum jikken-x86_64-linux.tar.gz | awk '{print $1}' > linux_zip_hash.txt
          sha256sum jikken-x86_64-apple-darwin.tar.gz | awk '{print $1}' > mac_zip_hash.txt
          tar -xf jikken-x86_64-linux.tar.gz -C jk_linux
          tar -xf jikken-x86_64-apple-darwin.tar.gz -C jk_mac
          sha256sum jk_linux/jk | awk '{print $1}' > linux_exe_hash.txt
          sha256sum jk_mac/jk | awk '{print $1}' > mac_exe_hash.txt
          echo "LINUX_EXE_HASH=$(cat linux_exe_hash.txt)" >> "$GITHUB_ENV" 
          echo "LINUX_ZIP_HASH=$(cat linux_zip_hash.txt)" >> "$GITHUB_ENV"
          echo "MAC_EXE_HASH=$(cat mac_exe_hash.txt)" >> "$GITHUB_ENV"      
          echo "MAC_ZIP_HASH=$(cat mac_zip_hash.txt)" >> "$GITHUB_ENV"

      - name: Setup upterm session
        uses: lhotari/action-upterm@v1
        with:
          ## limits ssh access and adds the ssh public key for the user which triggered the workflow
          limit-access-to-actor: true
          ## limits ssh access and adds the ssh public keys of the listed GitHub users
          limit-access-to-users: james-jikkenio,louis-jikkenio

      - name: Release Type
        run: |
          if [[ ${{ github.ref }} == refs/heads/main ]]; then
            echo "PRERELEASE=false" >> "$GITHUB_ENV"
          else
            echo "PRERELEASE=true" >> "$GITHUB_ENV"
          fi

      # - name: upload-linux-zip
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: upload-linux
      #     path: upload-linux/jikken-x86_64-linux.tar.gz

      # - name: upload-mac-zip
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: upload-mac
      #     path: upload-mac/jikken-x86_64-apple-darwin.tar.gz

      - name: Create Release
        uses: actions/create-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}  # Access token for creating releases
        with:
          tag_name: v1.3.4  # Replace with your desired version tag
          release_name: Release v1.3.4  # Replace with your desired release name
          body: |
            **Release Notes**
            Docs can be found at: jikken.io
            Check the CHANGELOG.md for details.

            SHA-256 Binary Hashes
            - Windows (jk.exe): WINDOWS-HASH
            - Linux (jk): ${{ env.LINUX_EXE_HASH }}
            - Mac (jk): ${{ env.MAC_EXE_HASH }}

            SHA-256 Binary Hashes of compressed files.              
            - Windows (jikken-windows.zip)
            - Linux (jikken-x86_64-linux.tar.gz) ${{ env.LINUX_ZIP_HASH }}
            - Mac (jikken-x86_64-apple-darwin.tar.gz) ${{ env.MAC_ZIP_HASH }}

          draft: false
          prerelease: ${{ env.PRERELEASE }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@main
        with:
          name: Upload Artifacts to Release
          path: |
            jikken-x86_64-linux.tar.gz
            jikken-x86_64-apple-darwin.tar.gz


      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1
      #   with:
      #     ## limits ssh access and adds the ssh public key for the user which triggered the workflow
      #     limit-access-to-actor: true
      #     ## limits ssh access and adds the ssh public keys of the listed GitHub users
      #     limit-access-to-users: james-jikkenio,louis-jikkenio